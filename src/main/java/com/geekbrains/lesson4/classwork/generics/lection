 Проблемы при отсутствии обобщённых типов при создании контейнера
  для хранения различных объектов (см. класс SimpleBox):
     - каждый раз делать каст, чтобы узнать что лежит в объекте
     - в объект может попасть не тот тип с которым мы собераемся работать.
     Каждый раз при вызове метода необходимо делать instanceof проверку

------------------------------------------------------------------------------------
Ограничения при работе с обопщениями
- Работает только с сылочными типами данных
  (Решение: Для приметивных типов использ обёртки)
- Внутри класса с обопщённым типом нельзя создать объект обопщённого типа
   Пример T obj = new T ();
- не можем создать массив
  (Решение: 1) Прокидывать массив через аргументы метода - public void doSomething (T[] arr) {};
            2) Создание массива обобщённых данных: T[] result = (T[]) Array.newInstance(Class clazz, value.size())
            - где clazz =String.class и т.д. (см. jetbulbl.GenericArray);
- нельзя создать статические поля с типом T;

- Имена дженериков не имеют значения JDK придерживается следующего стиля:
   T - type
   E - element
   K - key
   V - value
   N - number
----------------------------------
Насамом деле никаких дженериков не существует. Идея заключ. в следующем
При компиляции кода компилятор вместо <T> подставляет Object итам где используются
дженерики компилятор сам кастит. Поэтому в runtime мы не сможем узнать тип объекта
в дженерике. Случае <N extends Number> N-ка станент не Object, а Number.
---Дженерики, это просто "синтаксический сахар, который упрощает жизнь"---
Большой ПЛЮС дженерико, все ошибки выявляются на этапе компиляции, а с обджектами
только в момент исполнения
---------------------------------
Ограничения дженериков:
    <T extends Number> - либо Number, либо его наследник
    <T super Number> - либо Number, либо его родитель
    Пример: <T> copy (List<? super T> dst, List <? extends T src>
---------------------------------
-обобщённые классы
-обобщённые методы
-обобщённые интерфейсы
- НЕ может быть обобщённых исключений

